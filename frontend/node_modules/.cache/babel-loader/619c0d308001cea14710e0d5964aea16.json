{"ast":null,"code":"import { useContext, useLayoutEffect, useState, useMemo } from 'react';\nimport CookiesContext from './CookiesContext';\nimport { isInBrowser } from './utils';\nexport default function useCookies(dependencies) {\n  const cookies = useContext(CookiesContext);\n  if (!cookies) {\n    throw new Error('Missing <CookiesProvider>');\n  }\n  const [allCookies, setCookies] = useState(() => cookies.getAll());\n  if (isInBrowser()) {\n    useLayoutEffect(() => {\n      function onChange() {\n        const newCookies = cookies.getAll({\n          doNotUpdate: true\n        });\n        if (shouldUpdate(dependencies || null, newCookies, allCookies)) {\n          setCookies(newCookies);\n        }\n      }\n      cookies.addChangeListener(onChange);\n      return () => {\n        cookies.removeChangeListener(onChange);\n      };\n    }, [cookies, allCookies]);\n  }\n  const setCookie = useMemo(() => cookies.set.bind(cookies), [cookies]);\n  const removeCookie = useMemo(() => cookies.remove.bind(cookies), [cookies]);\n  const updateCookies = useMemo(() => cookies.update.bind(cookies), [cookies]);\n  return [allCookies, setCookie, removeCookie, updateCookies];\n}\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n  if (!dependencies) {\n    return true;\n  }\n  for (let dependency of dependencies) {\n    if (newCookies[dependency] !== oldCookies[dependency]) {\n      return true;\n    }\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}