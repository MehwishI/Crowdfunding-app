{"ast":null,"code":"var _jsxFileName = \"/home/labber/crowdfunding-app/frontend/src/components/LoginForm.jsx\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n//import { defer } from 'request/lib/helpers';\n///import {} from './hooks/useApplicationData';\n\nconst LForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const handleRegistrationSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submit action (page reload)\n\n    // Construct the request payload\n    const payload = {\n      username: username,\n      password: password,\n      email: email\n    };\n    console.log(\"payload-register\", payload);\n    try {\n      const response = await fetch('http://localhost:3001/users/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      console.log(\"response\", response);\n      if (response.ok) {\n        // Handle success - maybe clear form or show a success message\n        console.log('User registered successfully!');\n      } else {\n        // Handle error - maybe display error message to the user\n        console.log('Unsuccessful registration');\n      }\n    } catch (error) {\n      // Handle network error - maybe display error message to the user\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Register User\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleRegistrationSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: username,\n    onChange: e => setUsername(e.target.value),\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }, \"Register\")));\n};\nexport default RegisterForm;","map":{"version":3,"names":["React","useState","Link","LForm","username","setUsername","password","setPassword","email","setEmail","handleRegistrationSubmit","e","preventDefault","payload","console","log","response","fetch","method","headers","body","JSON","stringify","ok","error","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","RegisterForm"],"sources":["/home/labber/crowdfunding-app/frontend/src/components/LoginForm.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//import { defer } from 'request/lib/helpers';\r\n///import {} from './hooks/useApplicationData';\r\n\r\n\r\n\r\nconst LForm = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n\r\n  const handleRegistrationSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent the default form submit action (page reload)\r\n    \r\n    // Construct the request payload\r\n    const payload = {\r\n      username: username,\r\n      password: password,\r\n      email: email\r\n    };\r\n    console.log(\"payload-register\",payload)\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:3001/users/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n      console.log(\"response\",response)\r\n      \r\n      if (response.ok) {\r\n        // Handle success - maybe clear form or show a success message\r\n        console.log('User registered successfully!')\r\n      } else {\r\n        // Handle error - maybe display error message to the user\r\n        console.log('Unsuccessful registration')\r\n      }\r\n    } catch (error) {\r\n      // Handle network error - maybe display error message to the user\r\n    }\r\n  };\r\n\r\n\r\n \r\n\r\n  return(\r\n\r\n    <div>\r\n      <h2>Register User</h2>\r\n    \r\n    <form onSubmit={handleRegistrationSubmit}>\r\n      <input\r\n    type=\"text\"\r\n    value={username}\r\n    onChange={e => setUsername(e.target.value)}\r\n    placeholder=\"Username\"\r\n    />\r\n  \r\n  <input\r\n    type=\"email\"\r\n    value={email}\r\n    onChange={e => setEmail(e.target.value)}\r\n    placeholder=\"Email\"\r\n  />\r\n  <input\r\n    type=\"password\"\r\n    value={password}\r\n    onChange={e => setPassword(e.target.value)}\r\n    placeholder=\"Password\"\r\n  />\r\n  <button type=\"submit\">Register</button>\r\n</form>\r\n    \r\n    </div>\r\n  );\r\n}\r\nexport default RegisterForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}