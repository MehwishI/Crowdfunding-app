{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { Consumer } from './CookiesContext';\nexport default function withCookies(WrappedComponent) {\n  // @ts-ignore\n  const name = WrappedComponent.displayName || WrappedComponent.name;\n  class CookieWrapper extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.onChange = () => {\n        // Make sure to update children with new values\n        this.forceUpdate();\n      };\n    }\n    listen() {\n      this.props.cookies.addChangeListener(this.onChange);\n    }\n    unlisten(cookies) {\n      (cookies || this.props.cookies).removeChangeListener(this.onChange);\n    }\n    componentDidMount() {\n      this.listen();\n    }\n    componentDidUpdate(prevProps) {\n      if (prevProps.cookies !== this.props.cookies) {\n        this.unlisten(prevProps.cookies);\n        this.listen();\n      }\n    }\n    componentWillUnmount() {\n      this.unlisten();\n    }\n    render() {\n      const _a = this.props,\n        {\n          forwardedRef,\n          cookies\n        } = _a,\n        restProps = __rest(_a, [\"forwardedRef\", \"cookies\"]);\n      const allCookies = cookies.getAll();\n      return React.createElement(WrappedComponent, Object.assign({}, restProps, {\n        ref: forwardedRef,\n        cookies: cookies,\n        allCookies: allCookies\n      }));\n    }\n  }\n  CookieWrapper.displayName = `withCookies(${name})`;\n  CookieWrapper.WrappedComponent = WrappedComponent;\n  const ForwardedComponent = React.forwardRef((props, ref) => {\n    return React.createElement(Consumer, null, cookies => React.createElement(CookieWrapper, Object.assign({\n      cookies: cookies\n    }, props, {\n      forwardedRef: ref\n    })));\n  });\n  ForwardedComponent.displayName = CookieWrapper.displayName;\n  ForwardedComponent.WrappedComponent = CookieWrapper.WrappedComponent;\n  return hoistStatics(ForwardedComponent, WrappedComponent);\n}","map":null,"metadata":{},"sourceType":"module"}